{"/home/travis/build/npmtest/node-npmtest-ember-browserify/test.js":"/* istanbul instrument in package npmtest_ember_browserify */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-browserify/lib.npmtest_ember_browserify.js":"/* istanbul instrument in package npmtest_ember_browserify */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_ember_browserify = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_ember_browserify = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-browserify/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-ember-browserify && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_ember_browserify */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_ember_browserify\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_ember_browserify.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_ember_browserify.rollup.js'] =\n            local.assetsDict['/assets.npmtest_ember_browserify.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_ember_browserify.__dirname +\n                    '/lib.npmtest_ember_browserify.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-browserify/node_modules/ember-browserify/index.js":"module.exports = require('./lib/index');\n","/home/travis/build/npmtest/node-npmtest-ember-browserify/node_modules/ember-browserify/lib/index.js":"// Support old versions of Ember CLI.\nfunction findHost() {\n  var current = this;\n  var app;\n\n  // Keep iterating upward until we don't have a grandparent.\n  // Has to do this grandparent check because at some point we hit the project.\n  // Stop at lazy engine boundaries.\n  do {\n    if (current.lazyLoading === true) { return current; }\n    app = current.app || app;\n  } while (current.parent && current.parent.parent && (current = current.parent));\n\n  return app;\n}\n\nmodule.exports = {\n  name: 'ember-browserify',\n\n  included: function(app){\n    var VersionChecker = require('ember-cli-version-checker');\n\n    var checker = new VersionChecker(this);\n    var emberCliVersion = checker.for('ember-cli', 'npm');\n    var newImportApi;\n\n    if (emberCliVersion.isAbove('1.13.8')) {\n      newImportApi = true;\n    }\n\n    app = findHost.call(this);\n\n    var enableSourcemaps = app.options.sourcemaps && app.options.sourcemaps.enabled && app.options.sourcemaps.extensions.indexOf('js') > -1;\n\n    this.app = app;\n\n    this.options = {\n      root: this.app.project.root,\n      browserifyOptions: app.project.config(app.env).browserify || {},\n      enableSourcemap: enableSourcemaps,\n      fullPaths: app.env !== 'production'\n    };\n\n    app.import('browserify/browserify.js');\n    if (app.tests && (process.env.BROWSERIFY_TESTS || this.options.browserifyOptions.tests)) {\n      if (newImportApi) {\n        app.import('browserify-tests/browserify.js', {\n          type: 'test'\n        });\n      } else {\n        app.import({\n          test: 'browserify-tests/browserify.js'\n        });\n      }\n    }\n\n    if (app.importWhitelistFilters) {\n      app.importWhitelistFilters.push(function(moduleName){\n        return moduleName.slice(0,4) === 'npm:';\n      });\n    }\n  },\n\n  postprocessTree: function(type, tree){\n    var outputFile, options;\n    if (type === 'js'){\n      outputFile = 'browserify/browserify.js';\n    } else if (type === 'test'){\n      outputFile = 'browserify-tests/browserify.js';\n    }\n\n    if (outputFile) {\n      var StubGenerator = require('./stub-generator');\n      var CachingBrowserify = require('./caching-browserify');\n      var MergeTrees = require('broccoli-merge-trees');\n\n      options = Object.create(this.options);\n      options.outputFile = outputFile;\n      tree = new MergeTrees([\n        tree,\n        new CachingBrowserify(new StubGenerator(tree), options)\n      ]);\n    }\n    return tree;\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-ember-browserify/node_modules/ember-browserify/lib/caching-browserify.js":"var fs = require('fs');\nvar path = require('path');\nvar browserify = require('browserify');\nvar helpers = require('broccoli-kitchen-sink-helpers');\nvar RSVP = require('rsvp');\nvar CoreObject = require('core-object');\nvar mapSeries = require('promise-map-series');\nvar merge    = require('lodash').merge;\nvar rimraf = require('rimraf');\nvar symlinkOrCopy = require('symlink-or-copy');\nvar quickTemp = require('quick-temp');\nvar mkdirp = require('mkdirp');\nvar derequire = require('derequire');\nvar debug = require('debug')('ember-browserify:caching-browserify');\n\nvar through = require('through2');\n\nmodule.exports = CoreObject.extend({\n  init: function(inputTree, options){\n    if (!options) {\n      options = {};\n    }\n    this.inputTree = inputTree;\n    this.root = options.root;\n    this.inFile = options.inFile || 'browserify_stubs.js';\n    this.browserifyOptions = options.browserifyOptions;\n    this.enableSourcemap = options.enableSourcemap;\n    this.fullPaths = typeof options.fullPaths !== 'undefined' ? options.fullPaths : true;\n    this.outputFile = options.outputFile || 'browserify/browserify.js';\n    this.cache = {};\n    quickTemp.makeOrRemake(this, '_inputStaging');\n    quickTemp.makeOrRemake(this, '_destDir');\n  },\n\n  description: 'ember-browserify',\n\n  cleanup: function() {\n    if (this._destDir) {\n      rimraf.sync(this._destDir);\n    }\n    if (this._inputStaging) {\n      rimraf.sync(this._inputStaging);\n    }\n    if (this._outputCache) {\n      rimraf.sync(this._outputCache);\n    }\n  },\n\n  read: function (readTree) {\n    var self = this;\n    return readTree(this.inputTree).then(function(inDir){\n      return self.checkCache(inDir).then(function(cacheValid){\n        if (!self._outputCache || !cacheValid) {\n          return self._rebuild(inDir);\n        }\n      });\n    }).then(function(){\n      rimraf.sync(self._destDir);\n      symlinkOrCopy.sync(self._outputCache, self._destDir);\n      return self.watchNodeModules(readTree).then(function(){\n        return self._destDir;\n      });\n    });\n  },\n\n  _rebuild: function(inDir){\n    var self = this;\n    this._watchModules = Object.create(null);\n\n    // _inputStaging needs to stay at the same path, because the\n    // browserify bundler uses it as a fixed baseDir.\n    rimraf.sync(this._inputStaging);\n    mkdirp.sync(this._inputStaging);\n\n    symlinkOrCopy.sync(inDir + '/' + this.inFile, this._inputStaging + '/' + this.inFile);\n    quickTemp.makeOrRemake(this, '_outputCache');\n    return this.updateCache(this._outputCache).catch(function(err){\n      rimraf.sync(self._outputCache);\n      delete self._outputCache;\n      throw err;\n    });\n  },\n\n  bundler: function() {\n    if (!this._bundler) {\n      this._bundler = this.makeBundler();\n    }\n    return this._bundler;\n  },\n\n  makeBundler: function() {\n    var self = this;\n    var opts = merge({\n      cache: this.cache,\n      packageCache: {},\n      fullPaths: this.fullPaths,\n      basedir: this._inputStaging,\n      debug: this.enableSourcemap\n    }, this.browserifyOptions);\n\n    var b = browserify(opts);\n    ['transforms', 'externals', 'ignores', 'includes'].forEach(function(thing) {\n      if (!opts[thing]) { return; }\n      opts[thing].forEach(function(args){\n        if (!Array.isArray(args)) {\n          args = [args];\n        }\n        // If we leave it up to browserify to load named transform\n        // modules, it will load them relative to the discovered\n        // source, not relative to us. So we do it here instead.\n        if (thing === 'transforms' && typeof(args[0]) === 'string') {\n          args[0] = require(args[0]);\n        }\n        b = b[thing.replace(/s$/, '')].apply(b, args);\n      });\n    });\n    b.add('./' + self.inFile);\n\n    b.on('package', function(pkg){\n      // browserify *used to* reliably put the package's directory in\n      // pkg.__dirname. But as of browser-resolve 1.7.0 that isn't\n      // true, and we sometimes get a value here like\n      // '/path/to/your-module/index' instead of\n      // '/path/to/your-module'. So we do our own checking.\n      var pkgDir = pkg.__dirname;\n      var stat;\n      try {\n        stat = fs.statSync(pkgDir);\n      } catch(err) {\n        if (err.code !== 'ENOENT') {\n          throw err;\n        }\n      }\n      if (!stat || !stat.isDirectory()) {\n        pkgDir = path.dirname(pkgDir);\n      }\n      self._watchModules[pkgDir] = true;\n    });\n\n    b.on('dep', function (dep) {\n      dep.source = derequire(dep.source);\n      if (typeof dep.id === 'string') {\n        self.cache[dep.id] = dep;\n\n        // Even though we have a dep.source field available, we need\n        // to reread the file as it appears on disk, because\n        // dep.source is post-transformed.\n        var filename = dep.file;\n        if (filename.slice(0,1) === '.') {\n          filename = path.join(self._inputStaging, filename);\n        }\n        dep.hash = helpers.hashStrings([fs.readFileSync(filename)]);\n      }\n    });\n\n    if (opts.debug) {\n      // Adds a semicolon to the end of the browserified code. This is required\n      // to prevent unwanted interactions with other code when concatenated\n      // See https://github.com/ef4/ember-browserify/issues/63\n      // and https://github.com/substack/node-browserify/issues/806\n      b.pipeline.get('wrap').push(through.obj(function (row, enc, next) {\n        var contents = row.toString();\n        if (contents[contents.length - 1] === ')') {\n          contents += ';';\n          this.push(contents);\n        } else {\n          this.push(row);\n        }\n        next();\n      }));\n    }\n\n    return b;\n  },\n\n  updateCache: function(destDir) {\n    var outPath = path.join(destDir, this.outputFile);\n    var self = this;\n    fs.mkdirSync(path.dirname(outPath));\n    var start = Date.now();\n    return new RSVP.Promise(function (resolve, reject) {\n      self.bundler().bundle(function (err, data) {\n        debug('bundle in: %dms', Date.now() - start);\n        if (err) {\n          reject(err);\n        } else {\n          fs.writeFileSync(outPath, data);\n          resolve(destDir);\n        }\n      });\n    });\n  },\n\n  watchNodeModules: function(readTree) {\n    var self = this;\n    var root = self.normalizePath(self.root);\n\n    return mapSeries(Object.keys(self._watchModules), function(dir){\n      if (!root || root.indexOf(self.normalizePath(dir)) !== 0){\n        return readTree(dir);\n      }\n    });\n  },\n\n  // Changes path drive-letter to lowercase for Windows\n  normalizePath: function(path) {\n    return (path && path.match(/^[a-z]:\\\\/i)) ? path.charAt(0).toLowerCase() + path.slice(1) : path;\n  },\n\n  // Due to the way CJS dependencies work, the appearance of a new\n  // file in our input trees doesn't invalidate our cache -- because\n  // unless one of the existing files changes, nobody depends on the\n  // new file.\n  //\n  // Therefore we can iterate through only the files we already have\n  // in cache.\n  checkCache: function(inDir) {\n    var file, entry;\n    var ids = Object.keys(this.cache);\n    var cache = this.cache;\n    var cacheValid = true;\n\n    for (var i=0; i<ids.length; i++) {\n      entry = cache[ids[i]];\n      if (!entry.file) {\n        console.log(JSON.stringify(entry, null, 2));\n      }\n      if (entry.file.slice(0,1) === '.') {\n        file = path.join(inDir, entry.file);\n      } else {\n        file = entry.file;\n      }\n      if (hashFile(file) !== entry.hash) {\n        delete cache[entry.id];\n        cacheValid = false;\n      }\n    }\n    return RSVP.resolve(cacheValid);\n  }\n});\n\nfunction hashFile(file) {\n  var buf;\n  try {\n    buf = fs.readFileSync(file);\n    return helpers.hashStrings([buf]);\n  } catch(err) {\n    return null;\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-ember-browserify/node_modules/ember-browserify/lib/stub-generator.js":"var Plugin = require('broccoli-plugin');\nvar FSTree = require('fs-tree-diff');\nvar walkSync = require('walk-sync');\nvar Stubs = require('./stubs');\nvar fs = require('fs');\nvar md5Hex = require('md5-hex');\nvar debug = require('debug')('ember-browserify:stub-generator:');\n\nmodule.exports = StubGenerator;\nfunction StubGenerator(inputTree, options) {\n  if (!(this instanceof StubGenerator)) {\n    return new StubGenerator([inputTree], options);\n  }\n\n  if (Array.isArray(inputTree) || !inputTree) {\n    throw new Error('Expects one inputTree');\n  }\n\n  Plugin.call(this, [inputTree], options);\n  this._persistentOutput = true;\n\n  // setup persistent state\n  this._previousTree = new FSTree();\n  this.stubs = new Stubs();\n\n  this._fileToChecksumMap = {};\n}\n\nStubGenerator.prototype = Object.create(Plugin.prototype);\nStubGenerator.prototype.constructor = StubGenerator;\nStubGenerator.prototype.build = function() {\n  var start = Date.now();\n  var inputPath = this.inputPaths[0];\n  var previous  = this._previousTree;\n\n  // get patchset\n  var input = walkSync.entries(inputPath, [ '**/*.js' ]);\n\n  debug('input: %d', input.length);\n\n  var next = this._previousTree = FSTree.fromEntries(input);\n  var patchset = previous.calculatePatch(next);\n\n  debug('patchset: %d', patchset.length);\n\n  var applyPatch = Date.now();\n\n  // process patchset\n  patchset.forEach(function(patch) {\n    var operation = patch[0];\n    var path      = patch[1];\n    var fullPath  = inputPath + '/' + path;\n\n    switch (operation) {\n      case 'unlink': this.stubs.delete(fullPath); break;\n      case 'create':\n      case 'change': this.stubs.set(fullPath, fs.readFileSync(fullPath)); break;\n    }\n  }, this);\n\n  debug('patched applied in: %dms', Date.now() - applyPatch);\n\n  // apply output\n  this.writeFileIfContentChanged(this.outputPath + '/browserify_stubs.js', this.stubs.toAMD());\n\n  debug('build in %dms', Date.now() - start);\n};\n\nStubGenerator.prototype.writeFileIfContentChanged = function(fullPath, content) {\n  var previous = this._fileToChecksumMap[fullPath];\n  var next = md5Hex(content);\n\n  if (previous === next) {\n    debug('cache hit, no change to: %s', fullPath);\n    // hit\n  } else {\n    debug('cache miss, write to: %s', fullPath);\n    fs.writeFileSync(fullPath, content);\n    this._fileToChecksumMap[fullPath] = next; // update map\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-ember-browserify/node_modules/ember-browserify/lib/stubs.js":"module.exports = Stub;\nvar acorn = require('acorn');\nvar debug = require('debug')('ember-browserify:stubs');\n\nfunction Stub() {\n  this._isDirty = true;\n  this._map = {};\n  this.resetStats();\n}\n\nStub.prototype.resetStats = function() {\n  this._stats = {\n    deletions: 0,\n    sets: 0,\n    importTime: 0\n  };\n};\n\nStub.prototype.delete = function(fullPath) {\n  this._stats.deletions++;\n\n  if (fullPath in this._map) {\n    delete this._map[fullPath];\n    this._isDirty = true;\n  }\n};\n\nStub.prototype.set = function(fullPath, content) {\n  this._isDirty = true;\n  var start = Date.now();\n  this._map[fullPath] = importsFor(content, fullPath);\n  this._stats.importTime += (Date.now() - start);\n};\n\nStub.prototype.toAMD = function() {\n  debug(\"%o\", this._stats);\n  debug(\"isDirty\", this._dirty);\n  this.resetStats();\n\n  if (this._isDirty === false) {\n    return this._amd;\n  }\n\n  this._isDirty = false;\n\n  var imports = {};\n\n  // find unique modules\n  Object.keys(this._map).forEach(function(filePath) {\n    (Object.keys(this._map[filePath] || {})).forEach(function(moduleName) {\n      imports[moduleName] = true;\n    });\n  }, this);\n\n  // generate stub\n  this._amd = Object.keys(imports).sort().map(function(moduleName) {\n    return \"define('npm:\" + moduleName + \"', function(){ return { 'default': require('\" + moduleName + \"')};})\";\n  }).join(\"\\n\");\n\n  return this._amd;\n};\n\nfunction importsFor(src, fullPath) {\n  // In ember cli 2.x, src is es5 code, whereas in ember cli 1.x, src is still es6 code.\n\n  // First, try to parse as es5 code. Es6 code will return an error.\n  var result = tryCatch(parseEs5, src);\n  // If a syntax error is thrown, we assume this is because src is es6 code.\n  if (result instanceof Error) {\n    result = tryCatch(parseEs6, src);\n  }\n\n  // If result is still an error, there must have been a parse error\n  if (result instanceof Error) {\n    throw new Error('Error parsing code while looking for \"npm:\" imports: ' + result.stack || result + ' in file: ' + fullPath);\n  }\n\n  return result;\n}\n\nfunction forEachNode(node, visit) {\n  if (node && typeof node === 'object' && !node._eb_visited) {\n    node._eb_visited = true;\n    visit(node);\n    var keys = Object.keys(node);\n    for (var i=0; i < keys.length; i++) {\n      forEachNode(node[keys[i]], visit);\n    }\n  }\n}\n\nfunction head(array) {\n  return array[0];\n}\n\nfunction parseEs5(src) {\n  var imports = {};\n\n  var ast = acorn.parse(src);\n\n  forEachNode(ast, function(entry) {\n    if (entry.type === 'CallExpression' && entry.callee.name === 'define') {\n      head(entry.arguments.filter(function(item) {\n        return item.type === 'ArrayExpression';\n      })).elements.filter(function(element) {\n        return element.value.slice(0, 4) === 'npm:';\n      }).forEach(function(element) {\n        imports[element.value.slice(4)] = true;\n      });\n    }\n  });\n  return imports;\n}\n\nfunction parseEs6(src) {\n  var imports = {};\n\n  var ast = acorn.parse(src, {\n    ecmaVersion: 6,\n    sourceType: 'module'\n  });\n\n  forEachNode(ast, function(entry) {\n    if (entry.type === 'ImportDeclaration') {\n      var source = entry.source.value;\n      if (source.slice(0,4) === 'npm:') {\n        if (entry.kind === 'named') {\n          throw new Error(\"ember-browserify doesn't support named imports (you tried to import \" + entry.specifiers[0].id.name +  \" from \" + source);\n        }\n        imports[source.slice(4)] = true;\n      }\n    }\n  });\n\n  return imports;\n}\n\nfunction tryCatch(func, arg) {\n  try {\n    return func.call(null, arg);\n  }\n  catch(e) {\n    return e;\n  }\n}\n"}